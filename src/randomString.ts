import type { ArrayOneMore } from './types'
import randomNumbers from './randomNumbers'
import shuffle from './shuffle'

export type RandomStringCharType = 'uppercase' | 'lowercase' | 'number' | 'special'

export interface RandomStringOptions {
	length?: number
	charTypes?: RandomStringCharType | ArrayOneMore<RandomStringCharType>
	/**
	 * Elimination of confusing characters: oOLl,9gq,Vv,Uu,I1
	 */
	noConfuse?: boolean
	/**
	 * The generated random string must contain each of the listed character types
	 */
	strict?: boolean
}
/**
 * Get a random string
 *
 * @example
 * ```ts
 * // 1. No parameters are passed, a 32-bit (possibly) string containing upper and lower case letters and numbers is generated by default
 * randomString()
 * // PVSjz902EqYbmxaLtvDnggtnlvt5uFTZ
 *
 * // 2. Generate a 16-bit random string
 * randomString(16)
 * // coTgZy0mqqMJ1sMM
 *
 * // 3. Same effect as #2 above
 * randomString({
 * 	length: 16
 * })
 * // ngCI5aPqJm84t90d
 *
 * // 4. Generate containing special characters (old way of passing values, not recommended)
 * randomString(true)
 * // 0Uby@op3B-sK5]dHl4S|15As.OlHiNXd
 *
 * // 5. Same effect as #4 above (recommended)
 * randomString({
 * 	charTypes: ['uppercase', 'lowercase', 'number', 'special']
 * })
 * // m,2^vpkrE,F,DbcSFk0=vr&@DJ27j9XK
 *
 * // 6. Same effect as #4 above, Limit string length to 16 bits
 * randomString(16, true)
 * // dXz[J_sYM^3d8fnA
 *
 * // 7. Generate a 16-bit random number
 * randomString({
 * 	length: 16,
 * 	charTypes: 'number'
 * })
 * // 7450026301030286
 *
 * // 8. Elimination of confusing characters: oOLl,9gq,Vv,Uu,I1
 * randomString({
 * 	length: 16,
 * 	noConfuse: true
 * })
 * // 8DEGna8ppC4mqyew
 *
 * // 9. The generated random string must contain at least 1 character of each type of character specified, e.g. to generate a 16-bit password that must contain upper and lower case letters, numbers, and special characters.
 * randomString({
 * 	length: 16,
 * 	strict: true
 * })
 * // PFYAPD5KFqOHIADL
 * ```
 * @since 5.0.0
 * @param len - the length of the random string that needs to be obtained
 * @param options - optional, randomString options
 * @returns - random string
 */
function randomString(len?: number, options?: RandomStringOptions | boolean): string
function randomString(
	len?: RandomStringOptions | boolean,
	options?: RandomStringOptions | boolean
): string
function randomString(
	len?: number | RandomStringOptions | boolean,
	options?: RandomStringOptions | boolean
): string {
	let charTypes: RandomStringCharType[] = ['uppercase', 'lowercase', 'number'],
		noConfuse = false,
		strict = false,
		result = ''
	if (typeof len !== 'number') {
		options = len
		len = typeof options === 'object' ? options.length ?? 32 : 32 // default
	}
	if (typeof options === 'boolean') {
		if (options) charTypes.push('special')
	} else if (options) {
		options.charTypes &&
			options.charTypes.length &&
			(charTypes = ([] as RandomStringCharType[]).concat(options.charTypes))
		noConfuse = options.noConfuse ?? noConfuse
		strict = options.strict ?? strict
	}

	const chars: Record<RandomStringCharType, string> = {
		uppercase: noConfuse ? 'ABCDEFGHJKMNPQRSTWXYZ' : 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		lowercase: noConfuse ? 'abcdefghjkmnpqrstwxyz' : 'abcdefghijklmnopqrstuvwxyz',
		number: noConfuse ? '2345678' : '0123456789',
		special: '~!@#$%^&*_+|:-=[];,.' // '~!@#$%^&*()_+{}|:"<>?`-=[]\\;\',./'
	}

	if (!strict) return generateString(len, charTypes.map(charType => chars[charType]).join(''))

	const charLengths = randomNumbers(charTypes.length, len)

	charTypes.forEach((charType, index) => {
		result += generateString(charLengths[index], chars[charType])
	})

	return shuffle(result)
}

/**
 * generate string
 *
 * @param len - string length
 * @param chars - chars
 * @returns - result
 */
function generateString(len: number, chars: string) {
	let str = ''
	const _maxPos = chars.length
	for (let i = 0; i < len; i++) {
		str += chars.charAt(Math.floor(Math.random() * _maxPos))
	}
	return str
}

export default randomString
